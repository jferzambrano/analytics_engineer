# -*- coding: utf-8 -*-
"""Prueba.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Zg7hHbR8kVxsDAxzF0IFR0ac5PIpcQl

#Extracción
"""

# Importar librerias
import requests
import json
import pandas as pd
from pandas import json_normalize, read_json, DataFrame

day_from, day_to = 1, 31
date_response = []
datas = []

for i in range(day_from, day_to + 1):
  # Ejecutar GET Request y Dirección de la página web con el día
  day_response = requests.get("http://api.tvmaze.com/schedule/web?date=2020-12-{}".format("%02d" % (i,)))
  # Se lee la cadena JSON
  date_response.append(json.loads(day_response.text))

print(len(date_response))
print(len(date_response[0]))

# se condensa toda la información en una lista
for day in date_response:
  for value in day:
    # se convierte la lista de generos a un string separado por comas de generos
    value['_embedded']['show']['genres'] = ','.join(x for x in value['_embedded']['show']['genres'])
    datas.append(value)

from google.colab import drive
drive.mount('/content/drive')

# Se almacena json
with open('/content/drive/MyDrive/Analytics Engineer/data.json', 'w') as file:
    json.dump(datas, file, indent=4)

# se pasa el objeto JSON a la json_normalize para obtener dataframe
print(len(datas))
df = json_normalize(datas)

df['_embedded.show.genres']

"""#Profiling"""

# Se confirma el total de los datos: 3.037 registros y 62 variables
df.shape

# Muestra
df.sample(n=10)

#Se verifica las variables con las que se cuenta, la cantidad de valores no nulos y su tipo de dato
df.info()

# Se calcula porcentaje de valores faltantes
dfr=pd.DataFrame(round((df.isna().sum()/df.shape[0])*100,2), columns=['Missings'])
# Se filtra Missings >= 1
df2 = dfr[dfr['Missings'] >= 1]
df2

# Mostrar la cantidad de registros, media, min, quarlies, etc de todos los datos numericos
df.describe(include='all')

#Ver las categorias type
df['type'].unique()

#Ver las categorias language
df['_embedded.show.language'].unique()

#Ver las categorias genres
df['_embedded.show.genres'].unique()

#Ver las categorias country
df['_embedded.show.webChannel.country.name'].unique()

"""#Limpieza"""

# Se eliminan las columnas sin datos
df33= df.drop(['image', '_embedded.show.network', '_embedded.show.dvdCountry', '_embedded.show.webChannel', '_embedded.show.image', '_embedded.show.webChannel.country'], axis=1)
# convertir a tipo fecha airdate
df33['airdate'] = pd.to_datetime(df33['airdate'])

# nuevo df
df33.info()

"""#Almacenar"""

from sqlalchemy import create_engine
engine= create_engine('sqlite://', echo=False) 

url = '/content/drive/MyDrive/Analytics Engineer/data.sql'
df33.to_sql(url, con=engine)

"""#Análisis"""

# Funcion para agregar etiquetas
def addlabels(x,y):
    for i in range(len(x)):
        plt.text(i, y[i], y[i], ha = 'center')

# averageRuntime por tipo (type) por mes
a1= pd.DataFrame(round(df33.groupby('type')['runtime'].mean(),2))

import matplotlib.pyplot as plt

Type = a1.index
AverageRuntime = a1['runtime']

# Se define el tamaño del gráfico
plt.figure(figsize=(12,6))
# Dibujamos un grafico de barras, especificando (valor eje X, valor eje Y)
plt.bar(Type,AverageRuntime,color="green")
addlabels(Type,AverageRuntime)
plt.title('AvgRuntime por Tipo y por Mes', fontsize=25)
plt.xlabel('Type', fontsize=20)
plt.ylabel('AverageRuntime', fontsize=20)
# Mostramos el gráfico
plt.show()

#Cantidad de series emitidas por género por mes.
a2= pd.DataFrame(round(df33.groupby('_embedded.show.genres')['id'].count(),2))

# Se asigna el nombre cantidad a la columna
a2.columns=['cant']
# Se ordena por promedio de mayor a menor
da2=a2.sort_values(by=['cant'],ascending=False)
da2

#Porcentaje por país, con respecto al total de series emitidas por mes.
a3= pd.DataFrame(round(df33.groupby('_embedded.show.webChannel.country.name')['id'].count()/df33.shape[0],2))
# Se asigna el nombre cantidad a la columna
a3.columns=['perc.']
# Se ordena por promedio de mayor a menor
da3=a3.sort_values(by=['perc.'],ascending=False)
da3

# Rating promedio de series por país y género por mes.

#tabla=pd.crosstab(datos1.FAMI_CUARTOSHOGAR, datos1.FAMI_NIVEL_SISBEN)


a4= pd.DataFrame(round(df33.groupby(['_embedded.show.webChannel.country.name', '_embedded.show.genres'])['rating.average'].mean(),2))

# Se asigna el nombre cantidad a la columna
a4.columns=['promedio']
# Se ordena por promedio de mayor a menor
da4=a4.sort_values(by=['promedio'],ascending=False)
# Se filtra 
df4 = da4[da4['promedio'] >= 0]
df4